#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define BASLA start = clock()
#define BIT end = clock()
#define SURE printf("Islem Suresi: %.3f", (double)(end - start) / CLOCKS_PER_SEC)
clock_t start,end;

struct ogr {
    int no;
    char *ad;
    char *soyad;
    int sira;
    int ogretim;
};

struct ogr birinciOgretim[400];
struct ogr ikinciOgretim[400];
int kacEklendiBir = 0;
int kacEklendiIki = 0;
int kacTaneSilindi = 0;
char* silinenler[100] = {};
int kacKereGecti[100] = {};

void ogrGuncelle(){
    int i,kay=0;
    for(i=0;i<kacEklendiBir;i++){
        if(birinciOgretim[i].ogretim==0){
            if(birinciOgretim[i+kay].ogretim==0){
                kay++;
            }
        }
        if(kay){
            birinciOgretim[i]=birinciOgretim[i+kay];
        }
    }
}

void ogrSilinenler(){

    int i;
    printf("Birden fazla kayit olan ogrenciler silindi.\n");
    printf("Silinenler:\n");
    for(i=0;i<kacTaneSilindi;i++){
        printf("%s %d kere silindi.\n", silinenler[i], kacKereGecti[i]);
    }
}

void ogrSirala(){
    int array[100], n, c, d;
    struct ogr swap;
    for (c = 0 ; c < ( n - 1 ); c++){
        for (d = 0 ; d < n - c - 1; d++){
            if ((birinciOgretim[d].sira > birinciOgretim[d+1].sira) || birinciOgretim[d+1].ogretim != 0){
                swap = birinciOgretim[d];
                birinciOgretim[d] = birinciOgretim[d+1];
                birinciOgretim[d+1] = swap;
            }
        }
    }

    for (c = 0 ; c < ( n - 1 ); c++){
        for (d = 0 ; d < n - c - 1; d++){
            if ((ikinciOgretim[d].sira > ikinciOgretim[d+1].sira) || ikinciOgretim[d+1].ogretim != 0){
                swap = ikinciOgretim[d];
                ikinciOgretim[d] = ikinciOgretim[d+1];
                ikinciOgretim[d+1] = swap;
            }
        }
    }
}

void ogrOcc(int k, char *ad, char *soyad, int j){
    if(k==1){
        birinciOgretim[j].ad = "";
        birinciOgretim[j].soyad = "";
        birinciOgretim[j].no = 0;
        birinciOgretim[j].sira = 0;
        birinciOgretim[j].ogretim = 0;
    }else if(k==2){
        ikinciOgretim[j].ad = "";
        ikinciOgretim[j].soyad = "";
        ikinciOgretim[j].no = 0;
        ikinciOgretim[j].sira = 0;
        ikinciOgretim[j].ogretim = 0;
    }
}

void silinenEkle(char *isim){
    if(kacTaneSilindi==0){
        silinenler[0]=isim;
        kacKereGecti[0]=1;
        kacTaneSilindi++;
    }else{
        int i;
        for(i=0;i<kacTaneSilindi;i++){
            if(strcmp(silinenler[i],isim)==0){
                kacKereGecti[i]++;
                break;
            }else{
                if(i+1==kacTaneSilindi){
                    silinenler[kacTaneSilindi]=isim;
                    kacKereGecti[kacTaneSilindi]=1;
                    kacTaneSilindi++;
                    break;
                }else{
                    continue;
                }
            }
        }
    }
}

void ogrSilme(){
    //garip bug
    int i=0,j=0;
    for(i=0;i<kacEklendiIki;i++){
        for(j=0;j<i;j++){
            if(strcmp(ikinciOgretim[i].ad, ikinciOgretim[j].ad)==0 && strcmp(ikinciOgretim[i].soyad, ikinciOgretim[j].soyad)==0){

                char merger[256];
                strcpy(merger,ikinciOgretim[j].ad);
                size_t length = strlen(merger);
                merger[length] = ' ';
                merger[length+1] = '\0';
                strcpy(merger, strcat(merger, ikinciOgretim[j].soyad));
                //birazdan pointerdaki veri degisecek, o yuzden pass edilen veriyi korumam gerekiyor
                char *keke = malloc(strlen(merger)+1);
                strcpy(keke,merger);
                silinenEkle(keke);

                ikinciOgretim[i].sira = ikinciOgretim[j].sira;
                ogrOcc(2,ikinciOgretim[i].ad, ikinciOgretim[i].soyad, j);
            }
        }
    }
    i=0;j=0;
    for(i=0;i<kacEklendiBir;i++){
        for(j=0;j<i;j++){
            if(strcmp(birinciOgretim[i].ad, birinciOgretim[j].ad)==0 && strcmp(birinciOgretim[i].soyad, birinciOgretim[j].soyad)==0){

                char merger[256];
                strcpy(merger,birinciOgretim[j].ad);
                size_t length = strlen(merger);
                merger[length] = ' ';
                merger[length+1] = '\0';
                strcpy(merger, strcat(merger, birinciOgretim[j].soyad));
                //birazdan pointerdaki veri degisecek, o yuzden pass edilen veriyi korumam gerekiyor
                char *keke = malloc(strlen(merger)+1);
                strcpy(keke,merger);
                silinenEkle(keke);

                birinciOgretim[i].sira = birinciOgretim[j].sira;

                ogrOcc(1,birinciOgretim[i].ad, birinciOgretim[i].soyad, j);
            }
        }
    }


    ogrSilinenler();
}

void ogrListele(){
    int i = 0;
    for(i=0;i<kacEklendiBir;i++){
        if(birinciOgretim[i].ogretim!=0){
            printf("%d: %d %s %s %d %d\n", i, birinciOgretim[i].no, birinciOgretim[i].ad, birinciOgretim[i].soyad, birinciOgretim[i].sira, birinciOgretim[i].ogretim);
        }
    }
    for(i=0;i<kacEklendiIki;i++){
        if(ikinciOgretim[i].ogretim!=0){
            printf("%d: %d %s %s %d %d\n", i, ikinciOgretim[i].no, ikinciOgretim[i].ad, ikinciOgretim[i].soyad, ikinciOgretim[i].sira, ikinciOgretim[i].ogretim);
        }
    }
}

struct ogr *ogrOlustur(int no, char* ad, char* soyad, int sira, int ogretim) {
  struct ogr *p = malloc(sizeof(struct ogr));
  p->no = no;
  p->ad = strdup(ad);
  p->soyad = strdup(soyad);
  p->sira = sira;
  p->ogretim = ogretim;
  return p;
}

void ogrEkle(int no, char* ad, char* soyad, int sira, int ogretim){
        if(ogretim==1){
            birinciOgretim[kacEklendiBir] = *ogrOlustur(no,ad,soyad,sira,ogretim);
            kacEklendiBir++;
        }else if(ogretim==2){
            ikinciOgretim[kacEklendiIki] = *ogrOlustur(no,ad,soyad,sira,ogretim);
            kacEklendiIki++;
        }
}

void ogrParse(char* str){
    char * pch;
    int ekleme=0, nth=0;
    int no, sira,ogretim;
    char* ad;
    char* soyad;
    pch = strtok (str," ");
    while (pch != NULL){
        if(nth==0){
            if(strcmp(pch,"OgrNo")==0){
                ekleme = 1;
                break;
            }else if(strcmp(pch,"-")==0){
                no = 0;
            }else{
                no = (int)strtod(pch, NULL);
            }
        }else if(nth==1){
            ad = pch;
        }else if(nth==2){
            soyad = pch;
        }else if(nth==3){
            sira = (int)strtod(pch, NULL);
        }else if(nth==4){
            if(strcmp(pch,"I\n")==0 || strcmp(pch,"I")==0){
                ogretim = 1;
            }else if(strcmp(pch,"II\n")==0 || strcmp(pch,"II")==0){
                ogretim = 2;
            }
        }
        nth++;
        pch = strtok (NULL, " ");
    }

    if(!ekleme){
        ogrEkle(no,ad,soyad,sira,ogretim);
        ekleme = 0;
    }
}

int main(){
    BASLA;

    char const* const fileName = "dosya.txt";
    FILE* file = fopen(fileName, "r");
    char line[512];

    while (fgets(line, sizeof(line), file)) {
        ogrParse(line);
    }

    fclose(file);

    ogrSilme();
    ogrSirala();
    ogrListele();



    BIT;
    SURE;

    return 0;
}